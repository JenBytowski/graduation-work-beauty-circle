// <auto-generated />
using System;
using BC.API.Services.MastersListService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BC.API.Services.MastersListService.Data.Migrations
{
    [DbContext(typeof(MastersContext))]
    [Migration("20200928220704_Reduce_Booking_Fields")]
    partial class Reduce_Booking_Fields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("masters")
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScheduleDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleDayId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MapProviderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstagramProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Stars")
                        .HasColumnType("float");

                    b.Property<string>("Viber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VkProfile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Pause", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduleDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleDayId");

                    b.ToTable("Pauses");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MasterId")
                        .IsUnique();

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.PriceListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutesMax")
                        .HasColumnType("int");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PriceMax")
                        .HasColumnType("int");

                    b.Property<int>("PriceMin")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("PriceListItems");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MasterId")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ScheduleDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeGroupId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentServiceTypeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeGroups");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceTypeSubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceTypeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeGroupId");

                    b.ToTable("ServiceTypeSubGroup");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Booking", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.ScheduleDay", null)
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleDayId");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Master", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BC.API.Services.MastersListService.Data.ServiceType", null)
                        .WithMany("Masters")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("BC.API.Services.MastersListService.Data.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Pause", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.ScheduleDay", "ScheduleDay")
                        .WithMany("Pauses")
                        .HasForeignKey("ScheduleDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleDay");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.PriceList", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.Master", "Master")
                        .WithOne("PriceList")
                        .HasForeignKey("BC.API.Services.MastersListService.Data.PriceList", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.PriceListItem", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.PriceList", "PriceList")
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BC.API.Services.MastersListService.Data.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Schedule", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.Master", "Master")
                        .WithOne("Schedule")
                        .HasForeignKey("BC.API.Services.MastersListService.Data.Schedule", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ScheduleDay", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.Schedule", null)
                        .WithMany("Days")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceType", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.ServiceTypeGroup", "ServiceTypeGroup")
                        .WithMany()
                        .HasForeignKey("ServiceTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTypeGroup");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceTypeSubGroup", b =>
                {
                    b.HasOne("BC.API.Services.MastersListService.Data.ServiceTypeGroup", "ServiceTypeGroup")
                        .WithMany("ServiceTypeSubGroupsGroups")
                        .HasForeignKey("ServiceTypeGroupId");

                    b.Navigation("ServiceTypeGroup");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Master", b =>
                {
                    b.Navigation("PriceList");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.PriceList", b =>
                {
                    b.Navigation("PriceListItems");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.Schedule", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ScheduleDay", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Pauses");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceType", b =>
                {
                    b.Navigation("Masters");
                });

            modelBuilder.Entity("BC.API.Services.MastersListService.Data.ServiceTypeGroup", b =>
                {
                    b.Navigation("ServiceTypeSubGroupsGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
